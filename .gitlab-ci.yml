variables:
    BASE_IMAGE: ubuntu:18.04
    TERRAFORM_VERSION: 0.11.13
    TERRAFORM_URL: https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    AWS_IAM_URL: https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator

stages:
  - build-images-and-terraform
  - kubernetes-create
  - cleanup

.before-bazel-builds: &before_bazel_builds
  - mkdir -p ~/.docker
  - "echo {\\\"auths\\\": {\\\"index.docker.io\\\": {\\\"auth\\\": \\\"`echo -n $DOCKER_USER:$DOCKER_PASS | base64`\\\"}}} > ~/.docker/config.json"
  - apt update && apt install -yq pkg-config zip g++ zlib1g-dev unzip python curl git
  - apt install -y openjdk-8-jdk
  - echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list
  - curl https://bazel.build/bazel-release.pub.gpg | apt-key add -
  - apt update && apt install -y bazel

.before-terraform-builds: &before_terraform
  - apt update && apt install -yq wget unzip
  - wget -O terraform.zip $TERRAFORM_URL
  - unzip terraform.zip -d /bin
  - terraform --version
  - apt-get update && apt install -y apt-transport-https curl gnupg2
  - curl -o aws-iam-authenticator $AWS_IAM_URL
  - chmod +x ./aws-iam-authenticator
  - mv aws-iam-authenticator /bin
  - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list
  - apt update
  - apt install -y kubectl
  - aws-iam-authenticator version

.before-kubernetes-builds: &before_kubernetes
  - apt-get update && apt install -y apt-transport-https curl gnupg2
  - curl -o aws-iam-authenticator $AWS_IAM_URL
  - chmod +x ./aws-iam-authenticator
  - mv aws-iam-authenticator /bin
  - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list
  - apt update
  - apt install -y kubectl
  - aws-iam-authenticator version

build-buildbarn-remote-execution:
  stage: build-images-and-terraform
  image: $BASE_IMAGE
  before_script: *before_bazel_builds
  script:
    - git clone https://github.com/buildbarn/bb-remote-execution
    - |
      for service in bb_worker bb_scheduler bb_runner_ubuntu16_04 bb_runner_debian8; do
          service_folder=`echo $service | cut -d _ -f -2`
          (cd bb-remote-execution && bazel build //cmd/${service_folder}:${service}_container_push)
          sed -i bb-remote-execution/bazel-bin/cmd/${service_folder}/${service}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/remoteapistesting/\1:$CI_PIPELINE_ID#"
          bash bb-remote-execution/bazel-bin/cmd/${service_folder}/${service}_container_push
      done

.build-buildbarn-template: &build-buildbarn-template
  stage: build-images-and-terraform
  image: $BASE_IMAGE
  before_script: *before_bazel_builds
  script:
    - git clone $REPO $SERVICE
    - (cd ${SERVICE} && bazel build //cmd/${SERVICE}:${SERVICE}_container_push)
    - sed -i ${SERVICE}/bazel-bin/cmd/${SERVICE}/${SERVICE}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/remoteapistesting/\1:$CI_PIPELINE_ID#"
    - bash ${SERVICE}/bazel-bin/cmd/${SERVICE}/${SERVICE}_container_push

build-buildbarn-storage:
  variables:
    REPO: https://github.com/buildbarn/bb-storage
    SERVICE: bb_storage
  <<: *build-buildbarn-template

terraform-job:
  stage: build-images-and-terraform
  image: $BASE_IMAGE
  before_script: *before_terraform
  script:
    - cd terraform/buildbarn/
    - terraform init
    - terraform apply -var cluster_id=$CI_PIPELINE_ID -auto-approve
  artifacts:
    paths:
      - terraform/buildbarn/
    untracked: true
    expire_in: 1 week

kubernetes-create-job:
  stage: kubernetes-create
  image: $BASE_IMAGE
  dependencies:
    - terraform-job
  before_script: *before_kubernetes
  script:
    - export KUBECONFIG=$PWD/terraform/buildbarn/kubeconfig_k8-cluster-$CI_PIPELINE_ID
    - |
      for service in frontend scheduler-ubuntu16-04 storage worker-ubuntu16-04; do
        sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/buildbarn/${service}.yaml
      done
    - kubectl create -f kubernetes/buildbarn/
    - kubectl -n buildbarn rollout status deployment.apps/scheduler-ubuntu16-04
    - kubectl -n buildbarn rollout status deployment.apps/frontend
    - kubectl -n buildbarn rollout status deployment.apps/worker-ubuntu16-04
    - kubectl -n buildbarn rollout status statefulset.apps/storage
    - until kubectl get pods --field-selector=status.phase!=Running --all-namespaces 2>&1 | grep -q "No resources found." ; do kubectl -n buildbarn get pods; sleep 10; done
    - kubectl get all --all-namespaces
    - sed -i "s|:latest|:0.24.1|g" kubernetes/jobs/buildbarn-client.yml
    # TODO: See issue #14
    - sleep 30
    - kubectl create -f kubernetes/jobs/buildbarn-client.yml
    - kubectl -n buildbarn describe jobs/abseil
    - kubectl -n buildbarn wait --for=condition=complete --timeout=600s job/abseil
    - kubectl -n buildbarn logs jobs/abseil

cleanup-terraform-job:
  stage: cleanup
  image: $BASE_IMAGE
  dependencies:
    - terraform-job
  before_script: *before_terraform
  script:
    - cd terraform/buildbarn/
    - terraform init
    - terraform destroy -var cluster_id=$CI_PIPELINE_ID -auto-approve
  variables:
    GIT_STRATEGY: none
  when: always
