variables:
    BASE_IMAGE: ubuntu:18.04
    TERRAFORM_VERSION: 0.12.2
    TERRAFORM_URL: https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    AWS_IAM_URL: https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator
    BADGE_URL: https://img.shields.io/badge

# May help with future badge making:
# cat foo.log | sed -n -e s/,//g -e '/^INFO: Elapsed time:/p' | awk '{ print $4 }'

stages:
  - build-images-and-terraform
  - bazel-kubernetes
  - buildgrid-speedtest
  - buildbarn-speedtest
  - buildfarm-speedtest
  - cleanup-and-deploy

.before-badge-template: &before_badge |
  apt-get update && apt install -yq curl
  mkdir -p public

.before-bazel-builds: &before_bazel_builds
  - mkdir -p ~/.docker
  - "echo {\\\"auths\\\": {\\\"index.docker.io\\\": {\\\"auth\\\": \\\"`echo -n $DOCKER_USER:$DOCKER_PASS | base64`\\\"}}} > ~/.docker/config.json"
  - apt update && apt install -yq pkg-config zip g++ zlib1g-dev unzip python curl git
  - apt install -y openjdk-8-jdk
  - echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list
  - curl https://bazel.build/bazel-release.pub.gpg | apt-key add -
  - apt update && apt install -y bazel

.before-terraform-builds: &before_terraform |
    apt update && apt install -yq wget unzip
    wget -O terraform.zip $TERRAFORM_URL
    unzip terraform.zip -d /bin
    terraform --version

.before-kubernetes-builds: &before_kubernetes |
    apt-get update && apt install -y apt-transport-https curl gnupg2
    curl -o aws-iam-authenticator $AWS_IAM_URL
    chmod +x ./aws-iam-authenticator
    mv aws-iam-authenticator /bin
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list
    apt update
    apt install -y kubectl
    aws-iam-authenticator version

build-docker-bazel-build-wrapper:
  stage: build-images-and-terraform
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - (cd docker/bazel && docker build -t $DOCKER_ACCOUNT/bazel-build:$CI_PIPELINE_ID -t $DOCKER_ACCOUNT/bazel-build:latest -f bazel-build.Dockerfile .)
    - docker push $DOCKER_ACCOUNT/bazel-build:$CI_PIPELINE_ID
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then docker push $DOCKER_ACCOUNT/bazel-build:latest; fi
  except:
    changes:
      - "*.md"

build-docker-bazel-buildgrid-wrapper:
  stage: build-images-and-terraform
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - (cd docker/bazel && docker build -t $DOCKER_ACCOUNT/bazel-build-buildgrid:$CI_PIPELINE_ID -t $DOCKER_ACCOUNT/bazel-build-buildgrid:latest -f bazel-build-buildgrid.Dockerfile .)
    - docker push $DOCKER_ACCOUNT/bazel-build-buildgrid:$CI_PIPELINE_ID
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then docker push $DOCKER_ACCOUNT/bazel-build-buildgrid:latest; fi
  except:
    changes:
      - "*.md"
  allow_failure: true

build-buildbarn-remote-execution:
  stage: build-images-and-terraform
  image: $BASE_IMAGE
  before_script: *before_bazel_builds
  script:
    - git clone https://github.com/buildbarn/bb-remote-execution
    - |
      for service in bb_worker bb_scheduler bb_runner_ubuntu16_04; do
          service_folder=`echo $service | cut -d _ -f -2`
          output_dir="bb-remote-execution/bazel-bin/cmd/${service_folder}"

          if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
              (cd bb-remote-execution && bazel build --host_force_python=PY2 //cmd/${service_folder}:${service}_container_push)
              sed -i $output_dir/${service}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/$DOCKER_ACCOUNT/\1:latest#"
              bash $output_dir/${service}_container_push
          fi

          (cd bb-remote-execution && bazel build --host_force_python=PY2 //cmd/${service_folder}:${service}_container_push)
          sed -i $output_dir/${service}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/$DOCKER_ACCOUNT/\1:$CI_PIPELINE_ID#"
          bash $output_dir/${service}_container_push
      done
  except:
    changes:
      - "*.md"
  allow_failure: true

.build-buildbarn-template: &build-buildbarn-template
  stage: build-images-and-terraform
  image: $BASE_IMAGE
  before_script: *before_bazel_builds
  script:
    - git clone $REPO $SERVICE
    - output_dir="${SERVICE}/bazel-bin/cmd/${SERVICE}"

    - |
      if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
          (cd ${SERVICE} && bazel build --host_force_python=PY2 //cmd/${SERVICE}:${SERVICE}_container_push)
          sed -i $output_dir/${SERVICE}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/$DOCKER_ACCOUNT/\1:latest#"
          bash $output_dir/${SERVICE}_container_push
      fi

    - (cd ${SERVICE} && bazel build --host_force_python=PY2 //cmd/${SERVICE}:${SERVICE}_container_push)
    - sed -i $output_dir/${SERVICE}_container_push -e "s#index.docker.io/buildbarn/\(.*\):{BUILD_SCM_TIMESTAMP}-{BUILD_SCM_REVISION}#index.docker.io/$DOCKER_ACCOUNT/\1:$CI_PIPELINE_ID#"
    - bash $output_dir/${SERVICE}_container_push
  except:
    changes:
      - "*.md"
  allow_failure: true


build-buildbarn-storage:
  variables:
    REPO: https://github.com/buildbarn/bb-storage
    SERVICE: bb_storage
  <<: *build-buildbarn-template

terraform-infra:
  stage: build-images-and-terraform
  image: $BASE_IMAGE
  before_script:
    - *before_terraform
    - *before_kubernetes
  script:
    - cd terraform
    - terraform init
    - terraform apply -var cluster_id=$CI_PIPELINE_ID -auto-approve
  artifacts:
    paths:
      - terraform/
    untracked: true
    expire_in: 1 week
  except:
    changes:
      - "*.md"

.re-deployment-and-build-template: &re_deployment_and_build_template |
      set -x
      export KUBECONFIG=$PWD/terraform/kubeconfig_k8-cluster-$CI_PIPELINE_ID
      kubectl create -f kubernetes/$RE_NAME/
      until kubectl -n $RE_NAME get pods --field-selector=status.phase!=Running 2>&1 | grep -q "No resources found."; do kubectl -n $RE_NAME get pods; sleep 10; done
      kubectl get all --all-namespaces
      # TODO: See issue #14
      sleep 30
      kubectl create -f kubernetes/jobs/$CLIENT_NAME.yml
      kubectl -n $RE_NAME describe jobs/$JOB_NAME
      until kubectl -n $RE_NAME get pods --field-selector=status.phase!=Running 2>&1 | grep -q "No resources found."; do kubectl -n $RE_NAME get pods; sleep 10; done
      kubectl -n $RE_NAME logs --follow jobs/$JOB_NAME
      kubectl -n $RE_NAME wait --for=condition=complete --timeout=5s job/$JOB_NAME
      set +x

.re-cleanup-template: &re_cleanup_template |
      set -x
      export KUBECONFIG=$PWD/terraform/kubeconfig_k8-cluster-$CI_PIPELINE_ID
      kubectl get all --all-namespaces
      kubectl delete namespace $RE_NAME
      set +x

kubernetes-buildbarn:
  stage: bazel-kubernetes
  image: $BASE_IMAGE
  variables:
    RE_NAME: buildbarn
    CLIENT_NAME: buildbarn-client
    JOB_NAME: abseil
  dependencies:
    - terraform-infra
  before_script:
    - *before_badge
    - *before_kubernetes
    - |
      for service in frontend scheduler-ubuntu16-04 storage worker-ubuntu16-04; do
        sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/buildbarn/${service}.yaml
        sed -i "s|remoteapistesting|$DOCKER_ACCOUNT|g" kubernetes/buildbarn/${service}.yaml
      done
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/jobs/buildbarn-client.yml
  script:
    - *re_deployment_and_build_template
    - curl -o public/buildbarn-deployed.svg $BADGE_URL/buildbarn-deployed-green.svg
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - public/
  except:
    changes:
      - "*.md"
  allow_failure: true

kubernetes-buildfarm:
  stage: bazel-kubernetes
  image: $BASE_IMAGE
  variables:
    RE_NAME: buildfarm
    CLIENT_NAME: buildfarm-client
    JOB_NAME: abseil
  dependencies:
    - terraform-infra
  before_script:
    - *before_badge
    - *before_kubernetes
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/jobs/buildfarm-client.yml
  script:
    - *re_deployment_and_build_template
    - curl -o public/buildfarm-deployed.svg $BADGE_URL/buildfarm-deployed-green.svg
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - public/
  except:
    changes:
      - "*.md"
  allow_failure: true

kubernetes-buildgrid:
  stage: bazel-kubernetes
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildgrid
    CLIENT_NAME: buildgrid-client
    JOB_NAME: abseil
  before_script:
    - *before_badge
    - *before_kubernetes
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/jobs/buildgrid-client.yml
  script:
    - *re_deployment_and_build_template
    - curl -o public/buildgrid-deployed.svg $BADGE_URL/buildgrid-deployed-green.svg
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - public/
  except:
    changes:
      - "*.md"
  allow_failure: true

kubernetes-buildbarn-bazel:
  stage: buildbarn-speedtest
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildbarn
    CLIENT_NAME: buildbarn-bazel
    JOB_NAME: bazel
  before_script:
    - *before_badge
    - *before_kubernetes
    - |
      for service in frontend scheduler-ubuntu16-04 storage worker-ubuntu16-04; do
        sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/buildbarn/${service}.yaml
        sed -i "s|remoteapistesting|$DOCKER_ACCOUNT|g" kubernetes/buildbarn/${service}.yaml
      done
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/jobs/buildbarn-*.yml
  script:
    - *re_deployment_and_build_template
    - "time=$(kubectl -n buildbarn logs --tail=10 jobs/bazel | sed -n -e s/,//g -e '/^INFO: Elapsed time:/p' | awk '{ print $4 }')"
    - curl -o public/buildbarn-time.svg $BADGE_URL/buildbarn_bazel_build-$time-green.svg
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - public/
  only:
    refs:
      - master
  except:
    changes:
      - "*.md"
  allow_failure: true

kubernetes-buildfarm-bazel:
  stage: buildfarm-speedtest
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildfarm
    CLIENT_NAME: buildfarm-bazel
    JOB_NAME: bazel
  before_script:
    - *before_badge
    - *before_kubernetes
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/jobs/buildfarm-*.yml
  script:
    - *re_deployment_and_build_template
    - "time=$(kubectl -n buildfarm logs --tail=10 jobs/bazel | sed -n -e s/,//g -e '/^INFO: Elapsed time:/p' | awk '{ print $4 }')"
    - curl -o public/buildfarm-time.svg $BADGE_URL/buildfarm_bazel_build-$time-green.svg
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - public/
  only:
    refs:
      - master
  except:
    changes:
      - "*.md"
  allow_failure: true


kubernetes-buildgrid-bazel:
  stage: buildgrid-speedtest
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  variables:
    RE_NAME: buildgrid
    CLIENT_NAME: buildgrid-bazel
    JOB_NAME: bazel
  before_script:
    - *before_badge
    - *before_kubernetes
    - sed -i "s|:latest|:$CI_PIPELINE_ID|g" kubernetes/jobs/buildgrid-*.yml
  script:
    - *re_deployment_and_build_template
    - "time=$(kubectl -n buildgrid logs --tail=10 jobs/bazel | sed -n -e s/,//g -e '/^INFO: Elapsed time:/p' | awk '{ print $4 }')"
    - curl -o public/buildgrid-time.svg $BADGE_URL/buildgrid_bazel_build-$time-green.svg
  after_script:
    - *re_cleanup_template
  artifacts:
    name: pages
    paths:
      - public/
  only:
    refs:
      - master
  except:
    changes:
      - "*.md"
  allow_failure: true


cleanup-terraform-job:
  stage: cleanup-and-deploy
  image: $BASE_IMAGE
  dependencies:
    - terraform-infra
  before_script:
    - *before_terraform
    - *before_kubernetes
  script:
    - cd terraform
    - terraform init
    - terraform destroy -var cluster_id=$CI_PIPELINE_ID -auto-approve
  variables:
    GIT_STRATEGY: none
  when: always
  except:
    changes:
      - "*.md"

pages:
  stage: cleanup-and-deploy
  image: $BASE_IMAGE
  before_script:
    - *before_badge
  script:
    - |
      if [ ! -f "public/buildbarn-deployed.svg" ]; then
        curl -o public/buildbarn-deployed.svg $BADGE_URL/buildbarn-failed-red.svg
      fi
    - |
      if [ ! -f "public/buildfarm-deployed.svg" ]; then
        curl -o public/buildfarm-deployed.svg $BADGE_URL/buildfarm-failed-red.svg
      fi
    - |
      if [ ! -f "public/buildgrid-deployed.svg" ]; then
        curl -o public/buildgrid-deployed.svg $BADGE_URL/buildgrid-failed-red.svg
      fi
    - |
      if [ ! -f "public/buildbarn-time.svg" ]; then
        curl -o public/buildbarn-time.svg $BADGE_URL/buildbarn_bazel_build-failed-red.svg
      fi
    - |
      if [ ! -f "public/buildfarm-time.svg" ]; then
        curl -o public/buildfarm-time.svg $BADGE_URL/buildfarm_bazel_build-failed-red.svg
      fi
    - |
      if [ ! -f "public/buildgrid-time.svg" ]; then
        curl -o public/buildgrid-time.svg $BADGE_URL/buildgrid_bazel_build-failed-red.svg
      fi
  artifacts:
    name: pages
    paths:
    - public/
  when: always
  only:
    refs:
      - master
  except:
    changes:
      - "*.md"
